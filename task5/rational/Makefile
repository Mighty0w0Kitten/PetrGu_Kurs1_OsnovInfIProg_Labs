# Установим компилятор и флаги
CC = gcc
CFLAGS = -Wall -g -fPIC

# Источники файлов
SRC = rational.c rat_math.c rat_io.c
OBJ = $(SRC:.c=.o)

# Цель по умолчанию
all: librational.a

# Правила для компиляции исходных файлов в объектные файлы
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# Правило для сборки статической библиотеки
librational.a: rational.o rat_math.o rat_io.o
	ar -rcs librational.a rational.o rat_math.o rat_io.o

# Очистка
clean:
	rm -f $(OBJ) librational.a





# Условие «напишите правила для сборки объектных файлов всех модулей» выполняется в части Makefile,
# где определено правило для компиляции исходных файлов .c в объектные файлы .o. Это правило указано как:
# %.o: %.c
#	 $(CC) $(CFLAGS) -c $< -o $@
#
# Здесь:
# - %.o: %.c — это шаблон для всех исходных файлов, которые имеют расширение .c, чтобы создать соответствующие
#   объектные файлы .o.
# - $(CC) $(CFLAGS) -c $< -o $@ — эта строка вызывает компилятор для создания объектных файлов. $< — это исходный
#   файл (например, rational.c), а $@ — это цель (объектный файл, например, rational.o).
# Таким образом, это правило говорит о том, как компилировать каждый исходный файл (.c) в объектный файл (.o),
# который затем будет использован для сборки библиотеки.

